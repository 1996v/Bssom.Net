<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using BssomSerializers.Binary;
using BssomSerializers.BssMap.KeyResolvers;
using BssomSerializers.Internal;
using BssomSerializers.BssomBuffer;
namespace BssomSerializers.Formatters
{
<# 
    Func<string,string> GetFclName = (n) => {
        if(n=="Int8")
             return "SByte";
         else if(n=="UInt8")
             return "Byte";
         else if(n=="Float32")
             return "Single";
         else if(n=="Float64")
             return "Double";
         else 
             return n;
    };

  var buildInTypes = new string[]{"Int8","Int16","Int32","Int64","UInt8","UInt16","UInt32","UInt64","Float32","Float64","Boolean"};//datetime,string
  var nativeTypes = new string[] {"Char","Decimal","Guid"};//nativeDatetime
  foreach(var name in buildInTypes.Union(nativeTypes).Except(new string[] { "UInt8" })) {
        var isNativeType=nativeTypes.Contains(name);
        var fclName=GetFclName(name);
        var typeCodeStr="BuildInTypeCodeSize";
        if(nativeTypes.Contains(name))
            typeCodeStr="NativeTypeCodeSize";
        
        var sizeWithOutTypeHeadStr="BssomBinaryPrimitives.Array1TypeSizeWithOutTypeHeadAndLength(BssomBinaryPrimitives."+name+"Size, value.Length)";
        //Size
        var sizeStr="BssomBinaryPrimitives.Array1BuildInTypeSize(BssomBinaryPrimitives."+name+"Size, value.Length)";
        if(isNativeType)
            sizeStr="BssomBinaryPrimitives.Array1NativeTypeSize(BssomBinaryPrimitives."+name+"Size, value.Length)";
        //Deserialize
        var tryEnsureStr="TryReadNullWithEnsureArray1BuildInType(BssomType."+name+"Code)";
        if(isNativeType)
            tryEnsureStr="TryReadNullWithEnsureArray1NativeType(NativeBssomType."+name+"Code)";
        //Serialize
        var writeTypeStr="WriteArray1BuildInType(BssomType."+name+"Code)";
        if(isNativeType)
            writeTypeStr="WriteArray1NativeType(NativeBssomType."+name+"Code)";
#>
    /// <summary>
    /// Format <see cref="<#=fclName#>"/>[] as BssomType.Array1
    /// </summary>
    public sealed class <#=name#>ArrayFormatter : IBssomFormatter<<#=fclName#>[]>
    {
        public static readonly <#=name#>ArrayFormatter Instance = new <#=name#>ArrayFormatter();

        private <#=name#>ArrayFormatter()
        {
        }

        public int Size(ref BssomSizeContext context, <#=fclName#>[] value)
        {
            if (value == null)
                return BssomBinaryPrimitives.NullSize;

            return <#=sizeStr#>;
        }

        public <#=fclName#>[] Deserialize(ref BssomReader reader, ref BssomDeserializeContext context)
        {
            if (reader.<#=tryEnsureStr#>)
                return default;
            context.Option.Security.DepthStep(ref context);
            reader.SkipVariableNumber();
            int len = reader.ReadVariableNumber();
            var val = new <#=fclName#>[len];
            for (int i = 0; i < len; i++)
            {
                val[i] = reader.Read<#=name#>WithOutTypeHead();
            }
            context.Depth--;
            return val;
        }

        public void Serialize(ref BssomWriter writer, ref BssomSerializeContext context, <#=fclName#>[] value)
        {
            if(value == null)
            {
                writer.WriteNull();
                return;
            }
            writer.<#=writeTypeStr#>;
            writer.WriteVariableNumber(<#=sizeWithOutTypeHeadStr#>);
            writer.WriteVariableNumber(value.Length);
            for (int i = 0; i < value.Length; i++)
            {
                writer.WriteWithOutTypeHead(value[i]);
            }
        }
    }
<#}#>
    /// <summary>
    /// Format <see cref="DateTime"/>[] as BssomType.Array1
    /// </summary>
    public sealed class DateTimeArrayFormatter : IBssomFormatter<DateTime[]>
    {
        public static readonly DateTimeArrayFormatter Instance = new DateTimeArrayFormatter();

        private DateTimeArrayFormatter()
        {
        }

        public int Size(ref BssomSizeContext context, DateTime[] value)
        {
            if (value == null)
                return BssomBinaryPrimitives.NullSize;

            if (context.Option.IsUseStandardDateTime == false)
                return BssomBinaryPrimitives.NativeDateTimeArraySize(value.Length);
            else
            {
                long dataLen = 0;
                for (int i = 0; i < value.Length; i++)
                {
                    dataLen += BssomBinaryPrimitives.StandardDateTimeSize(value[i]);
                }
                return BssomBinaryPrimitives.DateTimeArraySize(value.Length, dataLen);
            }
        }

        public DateTime[] Deserialize(ref BssomReader reader, ref BssomDeserializeContext context)
        {
            if (reader.TryReadNullWithEnsureBuildInType(BssomType.Array1))
                return default;
            context.Option.Security.DepthStep(ref context);
            DateTime[] val;
            byte type = reader.ReadBssomType();
            switch (type)
            {
                case BssomType.DateTimeCode:
                    reader.SkipVariableNumber();
                    int len = reader.ReadVariableNumber();
                    val = new DateTime[len];
                    for (int i = 0; i < len; i++)
                    {
                        val[i] = reader.ReadStandDateTimeWithOutTypeHead();
                    }
                    break;
                case BssomType.NativeCode:
                    reader.EnsureType(NativeBssomType.DateTimeCode);
                    reader.SkipVariableNumber();
                    len = reader.ReadVariableNumber();
                    val = new DateTime[len];
                    for (int i = 0; i < len; i++)
                    {
                        val[i] = reader.ReadNativeDateTimeWithOutTypeHead();
                    }
                    break;
                default:
                    throw BssomSerializationOperationException.UnexpectedCodeRead(type, reader.Position);            
            }

            context.Depth--;
            return val;
        }

        public void Serialize(ref BssomWriter writer, ref BssomSerializeContext context, DateTime[] value)
        {
            if (value == null)
            {
                writer.WriteNull();
                return;
            }

            if (context.Option.IsUseStandardDateTime)
                writer.WriteArray1BuildInType(BssomType.DateTimeCode);
            else
                writer.WriteArray1NativeType(NativeBssomType.DateTimeCode);
            long pos = writer.FillUInt32FixNumber();
            writer.WriteVariableNumber(value.Length);
            for (int i = 0; i < value.Length; i++)
            {
                writer.Write(value[i], context.Option.IsUseStandardDateTime, false);
            }
            writer.WriteBackFixNumber(pos,checked((int)(writer.Position - pos - BssomBinaryPrimitives.FixUInt32NumberSize)));
        }
    }
    /// <summary>
    /// Format <see cref="Byte"/>[] as BssomType.Array1
    /// </summary>
    public sealed class UInt8ArrayFormatter : IBssomFormatter<Byte[]>
    {
        public static readonly UInt8ArrayFormatter Instance = new UInt8ArrayFormatter();

        private UInt8ArrayFormatter()
        {
        }

        public int Size(ref BssomSizeContext context, Byte[] value)
        {
            if (value == null)
                return BssomBinaryPrimitives.NullSize;

            return BssomBinaryPrimitives.Array1BuildInTypeSize(BssomBinaryPrimitives.UInt8Size, value.Length);
        }

        public Byte[] Deserialize(ref BssomReader reader, ref BssomDeserializeContext context)
        {
            return reader.ReadBytes();
        }

        public void Serialize(ref BssomWriter writer, ref BssomSerializeContext context, Byte[] value)
        {
            writer.Write(value);
        }
    }
}
