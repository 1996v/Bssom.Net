<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using Bssom.Serializer.Internal;
using Bssom.Serializer.Binary;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
namespace Bssom.Serializer
{
    //BuildInTypeCode
    public partial struct BssomReader
    {
<# 
    Func<string,string> GetFclName = (n) => {
        if(n=="Int8")
             return "SByte";
         else if(n=="UInt8")
             return "Byte";
         else if(n=="Float32")
             return "Single";
         else if(n=="Float64")
             return "Double";
         else 
             return n;
    };

  var buildInTypes = new string[]{"Int8","Int16","Int32","Int64","UInt8","UInt16","UInt32","UInt64","Float32","Float64","Boolean"};//datetime,string
  var nativeTypes = new string[] {"Char","Decimal","Guid"};//nativeDatetime
  foreach(var name in buildInTypes.Union(nativeTypes)) {
        var isNativeType=nativeTypes.Contains(name);
        var fclName=GetFclName(name);
        var eleSize="BssomBinaryPrimitives."+name+"Size";
        var lenWithOutHeadStr="BssomBinaryPrimitives.BuildInTypeCodeSize";
        //var lenStr="BssomBinaryPrimitives."+name+"Size + BssomBinaryPrimitives.BuildInTypeCodeSize;";
        var ensureTypeStr="EnsureTypeWithSkipBlankCharacter(BssomType."+name+"Code);";
        var codeSizeStr="BuildInTypeCodeSize";
        if(nativeTypes.Contains(name)){
            lenWithOutHeadStr="BssomBinaryPrimitives.NativeTypeCodeSize";
            eleSize="BssomBinaryPrimitives."+name+"Size";
            //lenStr="BssomBinaryPrimitives."+name+"Size + BssomBinaryPrimitives.NativeTypeCodeSize;";
            ensureTypeStr="EnsureNativeTypeWithSkipBlankCharacter(NativeBssomType."+name+"Code);";
            codeSizeStr="NativeTypeCodeSize";
}
#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal <#=fclName#> Read<#=name#>()
        {
            <#=ensureTypeStr#>
            var val = BssomBinaryPrimitives.<#=ReadFunctionNameMap(name)#>(ref BssomBuffer.ReadRef(<#=eleSize#>));
            BssomBuffer.SeekWithOutVerify(<#=eleSize#>, BssomSeekOrgin.Current);
            return val;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal <#=fclName#> Read<#=name#>WithOutTypeHead()
        {
            var val = BssomBinaryPrimitives.<#=ReadFunctionNameMap(name)#>(ref BssomBuffer.ReadRef(<#=eleSize#>));
            BssomBuffer.SeekWithOutVerify(<#=eleSize#>, BssomSeekOrgin.Current);
            return val;
        }
<#    } #>
    }
}

<#+    
string ReadFunctionNameMap(string name)
{
    if(name=="Int8")
            return "ReadInt8";
    else if(name=="UInt8")
             return "ReadUInt8";
    else if(name=="Decimal")
            return "ReadDecimal";
    else if(name=="Boolean")
            return "ReadBoolean";
    else if(name=="Guid")
            return "ReadGuid";
    else 
            return "Read"+name+"LittleEndian";
} 
#>